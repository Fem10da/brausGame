/**
 * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ DOM-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤
 */

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ DOM-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≥—Ä–∏
function checkGameElements() {
    console.log('--- –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ DOM-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤ ---');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    const gameArea = document.querySelector('.game-area');
    console.log('Game Area:', gameArea ? 'OK' : 'Missing');
    
    const options = document.getElementById('options');
    console.log('Options container:', options ? 'OK' : 'Missing');
    console.log('Options children:', options?.children.length || 0);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ —ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    const playBtn = document.getElementById('play-btn');
    console.log('Play button:', playBtn ? 'OK' : 'Missing');
    
    const nextBtn = document.getElementById('next-btn');
    console.log('Next button:', nextBtn ? 'OK' : 'Missing');
    
    const speedBtns = document.querySelectorAll('.speed-btn');
    console.log('Speed buttons:', speedBtns.length);
    
    const levelBtns = document.querySelectorAll('.level-btn');
    console.log('Level buttons:', levelBtns.length);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const wordDisplay = document.getElementById('word-display');
    console.log('Word display:', wordDisplay ? 'OK' : 'Missing');
    console.log('Current word:', wordDisplay?.textContent);
    
    const taskType = document.getElementById('task-type');
    console.log('Task type:', taskType ? 'OK' : 'Missing');
    console.log('Current task:', taskType?.textContent);
    
    const feedback = document.getElementById('feedback');
    console.log('Feedback:', feedback ? 'OK' : 'Missing');
    
    console.log('--- –ö—ñ–Ω–µ—Ü—å –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–º—ñ–Ω –≤ DOM
function monitorOptionsChanges() {
    const options = document.getElementById('options');
    if (!options) return;
    
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
                console.log('Options container –∑–º—ñ–Ω–µ–Ω–æ:', new Date().toISOString());
                console.log('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø—Ü—ñ–π:', options.children.length);
            }
        });
    });
    
    observer.observe(options, { childList: true });
    console.log('–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Options container –∑–∞–ø—É—â–µ–Ω–æ');
}

// –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    
    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const container = document.querySelector('.container');
    if (container) {
        const debugButton = document.createElement('button');
        debugButton.textContent = 'üîß Debug';
        debugButton.style.position = 'fixed';
        debugButton.style.bottom = '10px';
        debugButton.style.right = '10px';
        debugButton.style.zIndex = '1000';
        debugButton.style.padding = '8px 12px';
        debugButton.style.background = '#e74c3c';
        debugButton.style.color = 'white';
        debugButton.style.border = 'none';
        debugButton.style.borderRadius = '5px';
        debugButton.style.cursor = 'pointer';
        debugButton.style.fontSize = '12px';
        debugButton.style.fontWeight = 'bold';
        debugButton.style.boxShadow = '0 4px 8px rgba(0,0,0,0.3)';
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–Ω–µ–ª—å –¥–µ–±–∞–≥—ñ–Ω–≥—É
        const debugPanel = createDebugPanel();
        let panelVisible = false;
        
        debugButton.addEventListener('click', () => {
            panelVisible = !panelVisible;
            debugPanel.style.display = panelVisible ? 'block' : 'none';
            debugButton.textContent = panelVisible ? 'üîß Hide' : 'üîß Debug';
        });
        
        container.appendChild(debugButton);
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –æ–ø—Ü—ñ–π
    setTimeout(() => {
        monitorOptionsChanges();
    }, 1000);
});

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–µ–±–∞–≥—ñ–Ω–≥—É
function checkAudioStatus() {
    console.log('--- –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–¥—ñ–æ-—Å–∏—Å—Ç–µ–º–∏ ---');
    
    if (window.game && window.game.audioLoader) {
        const stats = window.game.audioLoader.getCacheStats();
        console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É –∞—É–¥—ñ–æ:', stats);
    }
    
    const currentWord = window.game?.currentWord;
    if (currentWord) {
        console.log('–ü–æ—Ç–æ—á–Ω–µ —Å–ª–æ–≤–æ:', currentWord.word);
        console.log('–ê—É–¥—ñ–æ —à–ª—è—Ö:', currentWord.audioPath);
        console.log('–ö–µ—à–æ–≤–∞–Ω–µ –∞—É–¥—ñ–æ:', window.game?.audioLoader?.getCachedAudioUrl(currentWord.word));
    }
    
    const audioElements = document.querySelectorAll('audio');
    console.log('–ê—É–¥—ñ–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ:', audioElements.length);
    
    audioElements.forEach((audio, index) => {
        console.log(`–ê—É–¥—ñ–æ ${index + 1}:`, {
            src: audio.src,
            readyState: audio.readyState,
            duration: audio.duration,
            currentTime: audio.currentTime,
            paused: audio.paused,
            ended: audio.ended,
            error: audio.error
        });
    });
    
    console.log('--- –ö—ñ–Ω–µ—Ü—å –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞—É–¥—ñ–æ ---');
}

function checkGameState() {
    console.log('--- –°—Ç–∞–Ω –≥—Ä–∏ ---');
    
    if (window.game) {
        console.log('–ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å:', window.game.currentLevel);
        console.log('–Ü–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞:', window.game.currentWordIndex);
        console.log('–ü–æ—Ç–æ—á–Ω–µ —Å–ª–æ–≤–æ:', window.game.currentWord);
        console.log('–¢–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è:', window.game.currentTaskType);
        console.log('–ë–∞–ª–∏:', window.game.score);
        console.log('–°–µ—Ä—ñ—è:', window.game.streak);
        console.log('–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:', window.game.playbackSpeed);
        console.log('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ:', window.game.isLoadingAudio);
        console.log('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –Ω–∞ —Ä—ñ–≤–Ω—ñ:', window.game.words[window.game.currentLevel]?.length || 0);
    } else {
        console.log('–û–±\'—î–∫—Ç –≥—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
    
    console.log('--- –ö—ñ–Ω–µ—Ü—å —Å—Ç–∞–Ω—É –≥—Ä–∏ ---');
}

function testAudioSync() {
    console.log('--- –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∞—É–¥—ñ–æ ---');
    
    const wordDisplay = document.getElementById('word-display');
    const playBtn = document.getElementById('play-btn');
    
    if (!wordDisplay || !playBtn) {
        console.error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
        return;
    }
    
    const displayedWord = wordDisplay.textContent;
    const gameWord = window.game?.currentWord?.word;
    
    console.log('–°–ª–æ–≤–æ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ:', displayedWord);
    console.log('–°–ª–æ–≤–æ –≤ –≥—Ä—ñ:', gameWord);
    console.log('–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è:', displayedWord === gameWord ? '‚úÖ OK' : '‚ùå –ü–†–û–ë–õ–ï–ú–ê');
    
    // –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
    playBtn.click();
    
    console.log('--- –ö—ñ–Ω–µ—Ü—å —Ç–µ—Å—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó ---');
}

function showPerformanceStats() {
    console.log('--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ---');
    
    if (window.performance) {
        const navigation = performance.getEntriesByType('navigation')[0];
        if (navigation) {
            console.log('–ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', navigation.loadEventEnd - navigation.loadEventStart, 'ms');
            console.log('–ß–∞—Å –¥–æ DOMContentLoaded:', navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart, 'ms');
        }
        
        const resources = performance.getEntriesByType('resource');
        const audioResources = resources.filter(r => r.name.includes('audio') || r.name.includes('.mp3'));
        console.log('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞—É–¥—ñ–æ —Ä–µ—Å—É—Ä—Å–∏:', audioResources.length);
        
        audioResources.forEach((resource, index) => {
            console.log(`–ê—É–¥—ñ–æ ${index + 1}:`, {
                name: resource.name,
                size: resource.transferSize,
                duration: resource.duration,
                startTime: resource.startTime
            });
        });
    }
    
    console.log('--- –ö—ñ–Ω–µ—Ü—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ---');
}

function enableVerboseLogging() {
    console.log('üìù –£–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è');
    
    // –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –º–µ—Ç–æ–¥–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    if (window.game) {
        const originalLoadWord = window.game.loadWord;
        window.game.loadWord = async function() {
            console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª–æ–≤–∞...');
            const result = await originalLoadWord.call(this);
            console.log('‚úÖ –°–ª–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', this.currentWord?.word);
            return result;
        };
        
        const originalPlayAudio = window.game.playAudio;
        window.game.playAudio = function() {
            console.log('üîä –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ –¥–ª—è:', this.currentWord?.word);
            return originalPlayAudio.call(this);
        };
    }
}

function createDebugPanel() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–Ω–µ–ª—å –¥–µ–±–∞–≥—ñ–Ω–≥—É
    const panel = document.createElement('div');
    panel.id = 'debug-panel';
    panel.style.cssText = `
        position: fixed;
        top: 10px;
        right: 10px;
        width: 300px;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 15px;
        border-radius: 10px;
        font-family: monospace;
        font-size: 12px;
        z-index: 9999;
        max-height: 80vh;
        overflow-y: auto;
        display: none;
    `;
    
    panel.innerHTML = `
        <h3>üîß –ü–∞–Ω–µ–ª—å –¥–µ–±–∞–≥—ñ–Ω–≥—É</h3>
        <button onclick="gameDebug.checkGameElements()">–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ DOM</button>
        <button onclick="gameDebug.checkAudioStatus()">–°—Ç–∞—Ç—É—Å –∞—É–¥—ñ–æ</button>
        <button onclick="gameDebug.checkGameState()">–°—Ç–∞–Ω –≥—Ä–∏</button>
        <button onclick="gameDebug.testAudioSync()">–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó</button>
        <button onclick="gameDebug.showPerformanceStats()">–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</button>
        <button onclick="gameDebug.enableVerboseLogging()">–î–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏</button>
        <button onclick="gameDebug.exportLogs()">–ï–∫—Å–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤</button>
        <div id="debug-info"></div>
    `;
    
    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const style = document.createElement('style');
    style.textContent = `
        #debug-panel button {
            display: block;
            width: 100%;
            margin: 5px 0;
            padding: 8px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 11px;
        }
        #debug-panel button:hover {
            background: #2980b9;
        }
    `;
    
    document.head.appendChild(style);
    document.body.appendChild(panel);
    
    return panel;
}

function exportLogs() {
    const logs = [];
    
    // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª—ñ (—Ü–µ –ø—Ä–∏–±–ª–∏–∑–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥)
    logs.push('=== –ï–∫—Å–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤ –¥–µ–±–∞–≥—ñ–Ω–≥—É ===');
    logs.push('–ß–∞—Å: ' + new Date().toISOString());
    logs.push('');
    
    // –°—Ç–∞–Ω –≥—Ä–∏
    if (window.game) {
        logs.push('–°–¢–ê–ù –ì–†–ò:');
        logs.push('–†—ñ–≤–µ–Ω—å: ' + window.game.currentLevel);
        logs.push('–°–ª–æ–≤–æ: ' + window.game.currentWord?.word);
        logs.push('–ë–∞–ª–∏: ' + window.game.score);
        logs.push('');
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥—ñ–æ
    if (window.game?.audioLoader) {
        const stats = window.game.audioLoader.getCacheStats();
        logs.push('–ê–£–î–Ü–û –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        logs.push('–ó–∞–≥–∞–ª–æ–º —Å–ª—ñ–≤: ' + stats.totalWords);
        logs.push('–ó –∞—É–¥—ñ–æ: ' + stats.wordsWithAudio);
        logs.push('–ë–µ–∑ –∞—É–¥—ñ–æ: ' + stats.wordsWithoutAudio);
        logs.push('');
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ —Å–∫–∞—á—É—î–º–æ —Ñ–∞–π–ª
    const blob = new Blob([logs.join('\n')], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'pronunciation-quest-debug-' + Date.now() + '.txt';
    a.click();
    URL.revokeObjectURL(url);
    
    console.log('üìÅ –õ–æ–≥–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—ñ
window.gameDebug = {
    checkGameElements,
    monitorOptionsChanges,
    checkAudioStatus,
    checkGameState,
    testAudioSync,
    showPerformanceStats,
    enableVerboseLogging,
    exportLogs
}; 