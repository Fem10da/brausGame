import { vowelSounds, consonantSounds, tongueTwisters } from './phonetics-data.js';
import audioLoader from './audio-loader.js';

/**
 * –ö–ª–∞—Å, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Ä–æ–±–æ—Ç—É –∑ —Ñ–æ–Ω–µ—Ç–∏—á–Ω–∏–º–∏ –∑–æ–Ω–∞–º–∏
 */
class PhoneticsZone {
    constructor() {
        this.activeZone = null;
        this.activeSoundGroup = null;
        this.activeSound = null;
        this.container = null;
        this.isLoading = false;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ñ–æ–Ω–µ—Ç–∏—á–Ω—É –∑–æ–Ω—É
     * @param {HTMLElement} container - DOM-–µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–Ω–∏
     */
    init(container) {
        this.container = container;
        this.renderZoneSelector();
        this.bindEvents();
    }

    /**
     * –ü—Ä–∏–≤'—è–∑—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
     */
    bindEvents() {
        // –ë—É–¥–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–µ–ª–µ–∫—Ç–æ—Ä —Ñ–æ–Ω–µ—Ç–∏—á–Ω–∏—Ö –∑–æ–Ω
     */
    renderZoneSelector() {
        if (!this.container) return;

        this.container.innerHTML = `
            <div class="back-navigation">
                <button id="back-to-main-menu-from-phonetics-btn" class="back-btn">‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é</button>
            </div>
            <h3>–û–±–µ—Ä—ñ—Ç—å —Ñ–æ–Ω–µ—Ç–∏—á–Ω—É –∑–æ–Ω—É –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è</h3>
            <div class="phonetics-zone-selector">
                <button class="zone-btn" data-zone="vowels">–ì–æ–ª–æ—Å–Ω—ñ –∑–≤—É–∫–∏</button>
                <button class="zone-btn" data-zone="consonants">–ü—Ä–∏–≥–æ–ª–æ—Å–Ω—ñ –∑–≤—É–∫–∏</button>
                <button class="zone-btn" data-zone="tongue-twisters">–°–∫–æ—Ä–æ–º–æ–≤–∫–∏</button>
            </div>
        `;

        // –ü—Ä–∏–≤'—è–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        const zoneButtons = this.container.querySelectorAll('.zone-btn');
        zoneButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const zone = btn.dataset.zone;
                this.selectZone(zone);
            });
        });
        
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        const backToMainMenuBtn = this.container.querySelector('#back-to-main-menu-from-phonetics-btn');
        if (backToMainMenuBtn) {
            backToMainMenuBtn.addEventListener('click', () => {
                if (window.game && typeof window.game.showMainMenu === 'function') {
                    window.game.showMainMenu();
                }
            });
        }
    }

    /**
     * –û–±–∏—Ä–∞—î –∑–æ–Ω—É –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è
     * @param {string} zone - –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–æ–Ω–∏
     */
    async selectZone(zone) {
        this.activeZone = zone;
        this.activeSoundGroup = null;
        this.activeSound = null;
        
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        this.setLoading(true);
        
        try {
            switch (zone) {
                case 'vowels':
                    await this.renderSoundGroups(vowelSounds);
                    break;
                case 'consonants':
                    await this.renderSoundGroups(consonantSounds);
                    break;
                case 'tongue-twisters':
                    await this.renderTongueTwisters();
                    break;
                default:
                    this.container.innerHTML = '<p>–ù–µ–≤—ñ–¥–æ–º–∞ –∑–æ–Ω–∞</p>';
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –∑–æ–Ω–∏:', error);
            this.container.innerHTML = '<p>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–æ–Ω–∏</p>';
        } finally {
            this.setLoading(false);
        }
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥—Ä—É–ø–∏ –∑–≤—É–∫—ñ–≤
     * @param {Array} soundGroups - –ú–∞—Å–∏–≤ –≥—Ä—É–ø –∑–≤—É–∫—ñ–≤
     */
    async renderSoundGroups(soundGroups) {
        if (!this.container) return;

        let html = `
            <div class="phonetics-zone-header">
                <button class="back-btn">‚¨ÖÔ∏è –ù–∞–∑–∞–¥</button>
                <button class="main-menu-btn">üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</button>
                <h3>${this.activeZone === 'vowels' ? '–ì–æ–ª–æ—Å–Ω—ñ –∑–≤—É–∫–∏' : '–ü—Ä–∏–≥–æ–ª–æ—Å–Ω—ñ –∑–≤—É–∫–∏'}</h3>
            </div>
            <div class="sound-groups">
        `;

        soundGroups.forEach(group => {
            html += `
                <div class="sound-group" data-group-id="${group.id}">
                    <h4>${group.name}</h4>
                    <p>${group.description}</p>
                    <button class="explore-btn" data-group-id="${group.id}">–í–∏–≤—á–∞—Ç–∏</button>
                </div>
            `;
        });

        html += `</div>`;
        this.container.innerHTML = html;

        // –ü—Ä–∏–≤'—è–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        const backBtn = this.container.querySelector('.back-btn');
        backBtn.addEventListener('click', () => {
            this.renderZoneSelector();
        });
        
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        const mainMenuBtn = this.container.querySelector('.main-menu-btn');
        if (mainMenuBtn) {
            mainMenuBtn.addEventListener('click', () => {
                if (window.game && typeof window.game.showMainMenu === 'function') {
                    window.game.showMainMenu();
                }
            });
        }

        const exploreButtons = this.container.querySelectorAll('.explore-btn');
        exploreButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const groupId = btn.dataset.groupId;
                const group = soundGroups.find(g => g.id === groupId);
                if (group) {
                    this.selectSoundGroup(group);
                }
            });
        });
    }

    /**
     * –û–±–∏—Ä–∞—î –≥—Ä—É–ø—É –∑–≤—É–∫—ñ–≤ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è
     * @param {Object} group - –ì—Ä—É–ø–∞ –∑–≤—É–∫—ñ–≤
     */
    async selectSoundGroup(group) {
        this.activeSoundGroup = group;
        this.setLoading(true);
        
        try {
            // –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
            await this.preloadAudioForExamples(group.sounds);
            
            let html = `
                <div class="phonetics-zone-header">
                    <button class="back-btn" data-back-to="${this.activeZone}">‚¨ÖÔ∏è –ù–∞–∑–∞–¥</button>
                    <button class="main-menu-btn">üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</button>
                    <h3>${group.name}</h3>
                    <p>${group.description}</p>
                </div>
                <div class="sounds-list">
            `;

            group.sounds.forEach(sound => {
                html += `
                    <div class="sound-item" data-sound="${sound.symbol}">
                        <div class="sound-symbol">${sound.symbol}</div>
                        <div class="sound-info">
                            <p class="sound-description">${sound.description}</p>
                            <div class="sound-examples">
                                ${sound.examples.map(example => `<span class="example" data-word="${example}">${example}</span>`).join(' ')}
                            </div>
                        </div>
                        <button class="play-sound-btn" data-symbol="${sound.symbol}">üîä</button>
                    </div>
                `;
            });

            html += `</div>`;
            this.container.innerHTML = html;

            // –ü—Ä–∏–≤'—è–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            const backBtn = this.container.querySelector('.back-btn');
            backBtn.addEventListener('click', () => {
                const backTo = backBtn.dataset.backTo;
                this.selectZone(backTo);
            });
            
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            const mainMenuBtn = this.container.querySelector('.main-menu-btn');
            if (mainMenuBtn) {
                mainMenuBtn.addEventListener('click', () => {
                    if (window.game && typeof window.game.showMainMenu === 'function') {
                        window.game.showMainMenu();
                    }
                });
            }

            const playButtons = this.container.querySelectorAll('.play-sound-btn');
            playButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    const symbol = btn.dataset.symbol;
                    const sound = group.sounds.find(s => s.symbol === symbol);
                    if (sound && sound.examples.length > 0) {
                        this.playExampleWord(sound.examples[0]);
                    }
                });
            });

            const examples = this.container.querySelectorAll('.example');
            examples.forEach(example => {
                example.addEventListener('click', () => {
                    const word = example.dataset.word;
                    this.playExampleWord(word);
                });
            });
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –≥—Ä—É–ø–∏ –∑–≤—É–∫—ñ–≤:", error);
            this.container.innerHTML = `
                <div class="phonetics-zone-header">
                    <button class="back-btn" data-back-to="${this.activeZone}">‚¨ÖÔ∏è –ù–∞–∑–∞–¥</button>
                    <h3>–ü–æ–º–∏–ª–∫–∞</h3>
                </div>
                <p>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–≤—É–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.</p>
            `;
            
            const backBtn = this.container.querySelector('.back-btn');
            backBtn.addEventListener('click', () => {
                const backTo = backBtn.dataset.backTo;
                this.selectZone(backTo);
            });
        } finally {
            this.setLoading(false);
        }
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–∫–æ—Ä–æ–º–æ–≤–∫–∏
     */
    async renderTongueTwisters() {
        if (!this.container) return;

        let html = `
            <div class="phonetics-zone-header">
                <button class="back-btn">‚¨ÖÔ∏è –ù–∞–∑–∞–¥</button>
                <button class="main-menu-btn">üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</button>
                <h3>–°–∫–æ—Ä–æ–º–æ–≤–∫–∏</h3>
            </div>
            <div class="tongue-twisters-list">
        `;

        tongueTwisters.forEach(twister => {
            html += `
                <div class="tongue-twister-item" data-difficulty="${twister.difficulty}">
                    <div class="tongue-twister-header">
                        <span class="difficulty-badge ${twister.difficulty}">${this.getDifficultyText(twister.difficulty)}</span>
                        <span class="focus-sound">–§–æ–∫—É—Å –Ω–∞ –∑–≤—É–∫–∞—Ö: ${twister.focusSound}</span>
                    </div>
                    <p class="tongue-twister-text">${twister.text}</p>
                    <p class="tongue-twister-translation">${twister.translation}</p>
                    <div class="tongue-twister-controls">
                        <button class="play-twister-btn" data-text="${twister.text}">üîä –ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏</button>
                        <button class="record-twister-btn" data-text="${twister.text}">üé§ –ó–∞–ø–∏—Å–∞—Ç–∏</button>
                    </div>
                </div>
            `;
        });

        html += `</div>`;
        this.container.innerHTML = html;

        // –ü—Ä–∏–≤'—è–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        const backBtn = this.container.querySelector('.back-btn');
        backBtn.addEventListener('click', () => {
            this.renderZoneSelector();
        });
        
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        const mainMenuBtn = this.container.querySelector('.main-menu-btn');
        if (mainMenuBtn) {
            mainMenuBtn.addEventListener('click', () => {
                if (window.game && typeof window.game.showMainMenu === 'function') {
                    window.game.showMainMenu();
                }
            });
        }

        const playButtons = this.container.querySelectorAll('.play-twister-btn');
        playButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const text = btn.dataset.text;
                this.playTonguetwister(text);
            });
        });

        const recordButtons = this.container.querySelectorAll('.record-twister-btn');
        recordButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const text = btn.dataset.text;
                // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å —á–µ—Ä–µ–∑ Speech Recognition API
                alert('–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø–∏—Å—É —Å–∫–æ—Ä–æ–º–æ–≤–∫–∏ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º!');
            });
        });
    }

    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
     * @param {string} difficulty - –†—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
     * @returns {string} - –¢–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å
     */
    getDifficultyText(difficulty) {
        switch (difficulty) {
            case 'easy': return '–õ–µ–≥–∫–æ';
            case 'medium': return '–°–µ—Ä–µ–¥–Ω—å–æ';
            case 'hard': return '–°–∫–ª–∞–¥–Ω–æ';
            default: return '–ù–µ–≤—ñ–¥–æ–º–æ';
        }
    }

    /**
     * –í—ñ–¥—Ç–≤–æ—Ä—é—î –ø—Ä–∏–∫–ª–∞–¥ —Å–ª–æ–≤–∞
     * @param {string} word - –°–ª–æ–≤–æ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
     */
    async playExampleWord(word) {
        try {
            const audio = new Audio();
            
            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞—É–¥—ñ–æ –≤ –∫–µ—à—ñ
            let audioUrl = audioLoader.getCachedAudioUrl(word);
            
            if (!audioUrl) {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î, —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
                audioUrl = await audioLoader.getAudioUrl(word);
            }
            
            if (audioUrl) {
                audio.src = audioUrl;
                audio.play().catch(error => {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ:', error);
                    this.synthesizeAndPlayWord(word);
                });
            } else {
                this.synthesizeAndPlayWord(word);
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ª–æ–≤–∞:', error);
            this.synthesizeAndPlayWord(word);
        }
    }

    /**
     * –°–∏–Ω—Ç–µ–∑—É—î —Ç–∞ –≤—ñ–¥—Ç–≤–æ—Ä—é—î —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ Web Speech API
     * @param {string} word - –°–ª–æ–≤–æ –¥–ª—è —Å–∏–Ω—Ç–µ–∑—É
     */
    synthesizeAndPlayWord(word) {
        if (!window.speechSynthesis) return;
        
        const utterance = new SpeechSynthesisUtterance(word);
        utterance.lang = 'en-GB';
        
        // –®—É–∫–∞—î–º–æ –±—Ä–∏—Ç–∞–Ω—Å—å–∫–∏–π –≥–æ–ª–æ—Å
        const voices = window.speechSynthesis.getVoices();
        const britishVoice = voices.find(voice => 
            voice.lang.includes('en-GB') || voice.name.includes('British')
        );
        
        if (britishVoice) {
            utterance.voice = britishVoice;
        }
        
        window.speechSynthesis.speak(utterance);
    }

    /**
     * –í—ñ–¥—Ç–≤–æ—Ä—é—î —Å–∫–æ—Ä–æ–º–æ–≤–∫—É
     * @param {string} text - –¢–µ–∫—Å—Ç —Å–∫–æ—Ä–æ–º–æ–≤–∫–∏
     */
    playTonguetwister(text) {
        this.synthesizeAndPlayWord(text);
    }

    /**
     * –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –∞—É–¥—ñ–æ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
     * @param {Array} sounds - –ú–∞—Å–∏–≤ –∑–≤—É–∫—ñ–≤ –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏
     */
    async preloadAudioForExamples(sounds) {
        const allExamples = [];
        
        // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ —Å–ª—ñ–≤
        sounds.forEach(sound => {
            allExamples.push(...sound.examples);
        });
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞—É–¥—ñ–æ –¥–ª—è –Ω–∏—Ö
        await audioLoader.preloadAudioForWords(allExamples);
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î/–ø—Ä–∏—Ö–æ–≤—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     * @param {boolean} isLoading - –°—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    setLoading(isLoading) {
        this.isLoading = isLoading;
        
        if (!this.container) return;
        
        let loadingElement = this.container.querySelector('.phonetics-zone-loading');
        
        if (isLoading) {
            if (!loadingElement) {
                loadingElement = document.createElement('div');
                loadingElement.className = 'phonetics-zone-loading';
                loadingElement.innerHTML = `
                    <div class="spinner"></div>
                    <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
                `;
                this.container.appendChild(loadingElement);
            }
        } else if (loadingElement) {
            loadingElement.remove();
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ–¥–∏–Ω –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
const phoneticsZone = new PhoneticsZone();
export default phoneticsZone; 